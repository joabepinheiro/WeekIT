<?php
namespace Application\Service;

use Base\Service\AbstractService;
use Doctrine\ORM\EntityManager;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;
use Zend\Filter\Exception\InvalidArgumentException;
use Zend\Stdlib\Hydrator;


class Evento extends AbstractService{

    public function __construct(EntityManager $em){
        parent::__construct($em);

        $this->entity = 'Application\Entity\Evento';
        $this->errorCodeValidator[1062] = 'O identiticador do evento jÃ¡ foi utilizado em outro evento';
    }

    public function insert($data)
    {

        $inicio = $data['inicio'];

        $ano = substr($inicio, 6, 4);
        $mes =  substr($inicio, 3, 2);
        $dia = substr($inicio, 0,2);
        $hora = substr($inicio, 11, 2);
        $minuto = substr($inicio, 14,2);

        $datetime = new \DateTime();
        $datetime->setDate($ano, $mes, $dia);
        $datetime->setTime($hora, $minuto);

        $data['inicio'] = $datetime;

        $fim = $data['fim'];

        $ano = substr($fim, 6, 4);
        $mes =  substr($fim, 3, 2);
        $dia = substr($fim, 0,2);
        $hora = substr($fim, 11, 2);
        $minuto = substr($fim, 14,2);

        $datetime = new \DateTime();
        $datetime->setDate($ano, $mes, $dia);
        $datetime->setTime($hora, $minuto);
        $data['fim'] = $datetime;

        $data['local'] = $this->em->getRepository('Application\Entity\Local')->find($data['local']);

        $evento = new \Application\Entity\Evento($data);
        $palestrantes = array();

        foreach ($data['palestrante'] as $key => $value){
            $palestrantes[] = $this->em->getRepository('Application\Entity\Palestrante')->find($value);
        }

        $evento->setPalestrante($palestrantes);

        return parent::insert($evento);
    }

    public function update($data)
    {
        $inicio = $data['inicio'];

        $ano = substr($inicio, 6, 4);
        $mes =  substr($inicio, 3, 2);
        $dia = substr($inicio, 0,2);
        $hora = substr($inicio, 11, 2);
        $minuto = substr($inicio, 14,2);

        $datetime = new \DateTime();
        $datetime->setDate($ano, $mes, $dia);
        $datetime->setTime($hora, $minuto);


        $data['inicio'] = $datetime;


        $fim = $data['fim'];

        $ano = substr($fim, 6, 4);
        $mes =  substr($fim, 3, 2);
        $dia = substr($fim, 0,2);
        $hora = substr($fim, 11, 2);
        $minuto = substr($fim, 14,2);

        $datetime = new \DateTime();
        $datetime->setDate($ano, $mes, $dia);
        $datetime->setTime($hora, $minuto);
        $data['fim'] = $datetime;


        $evento = new \Application\Entity\Evento($data);
        $evento->setLocal( $this->em->getRepository('Application\Entity\Local')->find($data['local']));

        $palestrantes = array();

        foreach ($data['palestrante'] as $key => $value){
            $palestrantes[] = $this->em->getRepository('Application\Entity\Palestrante')->find($value);
        }

        $evento->setPalestrante($palestrantes);

        return parent::update($evento); // TODO: Change the autogenerated stub
    }
}

