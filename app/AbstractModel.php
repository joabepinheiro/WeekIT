<?php

namespace App;

use App\Http\DefaultModel;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Eloquent\SoftDeletes;

class AbstractModel extends Model
{
    //use SoftDeletes;

    protected     $table;
    public $timestamps  = false;

    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    public function __construct(array $attributes = [])
    {
        $this->fillable = Schema::getColumnListing($this->table);

        parent::__construct($attributes);
    }

    public static function insert($attributes){

        unset($attributes['_token']);

        $entity =  self::create($attributes);

        if(!is_null($entity)){
            Log::insert([
                'antigo'          => null,
                'novo'            => json_encode($entity),
                'tipo'            => 'insert',
                'tabela'          => $entity->getTable(),
                'pk_tabela'       => $entity->id,
                'cadastrado_por'  =>  Auth::user()->id ?? null,
            ]);

            return $entity;
        }

        return $entity;
    }

    public function update(array $attributes = [], array $options = []){
        unset($attributes['_token']);

        $old_row = json_encode($this::find($attributes['id']));

        if(!is_null(parent::update($attributes))){

            $row = $this::find($attributes['id']);

            Log::insert([
                'antigo'          => $old_row,
                'novo'            => json_encode($row),
                'tipo'            => 'update',
                'tabela'          => $this->getTable(),
                'pk_tabela'       => $row->id,
                'cadastrado_por'  =>  Auth::user()->id ?? NULL,
            ]);

            return $row;
        }

        return null;
    }

    public static function destroy($ids)
    {
        $entity = ($instance = new static);

        if(is_numeric($ids)){
            $row = $entity::find($ids);

            $result = parent::destroy($ids);

            if($result > 0){
                Log::insert([
                    'antigo'          => json_encode($row),
                    'novo'            => null,
                    'tipo'            => 'delete',
                    'tabela'          => $entity->getTable(),
                    'pk_tabela'       => $row->id,
                    'cadastrado_por'  =>  Auth::user()->id ?? NULL,
                ]);
            }

            return $result;
        }


        return parent::destroy($ids); // TODO: Change the autogenerated stub
    }

    public static function fieldsFormCreate(){

        return  [
            'fields' =>[
                [
                    'id' => [
                        'type'          => 'hidden',
                    ],
                ],
            ]
        ];
    }

    public static function fieldsFormEdit(){

        $array = self::fieldsFormCreate();

        return $array;
    }


    public function cadastardoPor()
    {
        return $this->belongsTo('App\User', 'cadastrado_por');
    }
}
